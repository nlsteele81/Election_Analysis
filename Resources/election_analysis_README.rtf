{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww18580\viewh21300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ## Overview of Election Audit\
\
For this challenge, I assisted a Colorado Board of Elections employee, Tom, with an audit of the tabulated results of a U.S. Congressional district election in Colorado. I used Python to calculate the total number of votes cast, the number of votes each candidate received and his/her corresponding percentage of votes cast, and determined the election winner based upon the popular vote. Tom\'92s manager was looking to have me automate the audit process so that it can be used in the future to audit senatorial and local precinct elections. Ultimately, I was tasked with generating a vote count report to certify the results of the U.S. Congressional district election.\
\
## Election-Audit Results\
\
* A total of 369,711 votes were cast in this congressional election. In Images 1-3 illustrate the Python code used to generate the total number of votes cast. In Image 1, I added dependencies csv and os. I then assigned a variable to load the election_results.csv file. I also assigned a variable to election_analysis.txt, which I used to print the election results. Lastly in Image 1, I initialized a total vote counter and set it equal to zero. Image 2 illustrates the Python code that I used to open the CSV file and read the data contained within it. I then initiated a for loop to increment the total vote count by one for every row within the CSV file. Image 3 shows the Python commands that I used to print the election results to election_analysis.txt. Finally, Image 4 shows the election results that printed to election_analysis.txt.\
\
* \
}